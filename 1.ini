 1.⁠ ⁠Assignment

    variable_name = value
    ex:
        (var1,'=',val,0)

 2.⁠ ⁠Expression Assignment

    temp_# = Expression
    var = temp_#

 3.⁠ ⁠Global Variable

    g_variable_name     // variable name will be prefixed with g_ 

 4.⁠ ⁠Types

    types will not affect the construct

U:  we also need way to specify the datatype of the variable
    coz we need to verify if two different datatype are not performing any operations


 5.⁠ ⁠If Else structure

    if not (condition) goto Label#
    // code for true part
    goto End_Label#
    Label#
    // code for false part
    End_Label#

 6.⁠ ⁠While Loop

    Label#
    if not (condition) goto End_Label#
    // code in the loop section
    goto Label#
    End_Label#

 7.⁠ ⁠For Loop

    Initialization similar to 1. Assignment
    Label#
    if not (condition) goto End_Label#
    //code for the loop section
    Increment/Decrement
    goto Label#
    End_Label#

 8.⁠ ⁠Functions

    label: Function_Name // will act as a Label
    // code in the function
    return [value] // value is optional

 9.⁠ ⁠Function Call

    param# = value | Expression
    param# = ....
    .......
    call Function_Name

    // Please suggest how to handle the returned value


10.⁠ ⁠String // Strings are only supported in printf as argument

    str# = "some string"
    
11.⁠ ⁠Calling Printf // Functionality is reduced. No access specifier requiered just pass comma
                   // Seperated arguments

    param1 = str#
    param2 = ...
    call printf

12.⁠ ⁠START should be the first line
13.⁠ ⁠END should be the last line

NOTE: # symbols are integer count for distinguishing different Labels